import dataclasses
from typing import List, Dict, Any, Tuple, Literal, Optional, NewType

# Type alias for power names
PowerName = NewType('PowerName', str)

# --- Communication ---

@dataclasses.dataclass(frozen=True)
class Message:
    """Represents a message exchanged between agents."""
    sender: str  # Power name
    recipient: str  # Power name or 'BROADCAST'
    message_type: str  # e.g., 'PROPOSAL', 'INFO', 'QUERY', 'RESPONSE', 'ACCEPTANCE', 'REJECTION'
    content: Any  # Payload (string, structured dict, etc.)
    turn: str  # Game phase identifier (e.g., 'S1901M')
    round: Optional[int] = None # Optional negotiation round number within the phase

# --- Agent Input ---

@dataclasses.dataclass(frozen=True)
class PhaseInfo:
    """Information about the current phase and interaction step."""
    phase_name: str  # e.g., "S1901M", "F1901R"
    interaction_type: Literal[
        "NEGOTIATION_ROUND_1",
        "NEGOTIATION_ROUND_2",
        "NEGOTIATION_ROUND_3", # Add more rounds if needed
        "ORDER_SUBMISSION",
    ]
    negotiation_rounds_total: int

@dataclasses.dataclass(frozen=True)
class PublicGameState:
    """Snapshot of the public game state."""
    phase_name: str # Added phase name
    units: Dict[str, List[Tuple[str, str]]]  # {power: [(unit_type, location), ...]} e.g., {'FRANCE': [('A', 'PAR'), ('F', 'BRE')]}
    centers: Dict[str, List[str]]  # {power: [center_location, ...]}
    # influence: Optional[Dict[str, List[str]]] = None # {location: [power1, power2]} - Optional
    builds_disbands: Dict[str, int] = dataclasses.field(default_factory=dict) # {power: count}

@dataclasses.dataclass(frozen=True)
class HistorySummary:
    """Summarized historical information generated by an LLM."""
    summary_text: str # The concise narrative summary of the game history up to the previous phase.
    last_phase_results: Dict[str, List[str]] = dataclasses.field(default_factory=dict) # Results from the last phase

@dataclasses.dataclass(frozen=True)
class AgentContextBundle:
    """The complete information package provided to an agent on its turn."""
    power_name: str
    agent_instructions: str
    current_phase_info: PhaseInfo
    public_game_state: PublicGameState
    history_summary: HistorySummary
    communication_inbox: List[Message]
    private_memory_snippet: Optional[Dict[str, Any]] = None # Optional key state items

# --- Agent Output ---

@dataclasses.dataclass(frozen=True)
class ActionToolCall:
    """Represents a single tool call requested by an agent."""
    tool_name: Literal[
        "send_message",
        "submit_order",
        "update_memory",
        "log_thought",
        "finish_negotiation_round",
        "finish_orders",
        # Add other potential tools here if needed
    ]
    arguments: Dict[str, Any] = dataclasses.field(default_factory=dict) 